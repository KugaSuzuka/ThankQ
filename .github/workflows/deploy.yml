name: Deploy ThankQ (frontend ⬆ + backend ⬆)

on:
  push:
    branches: [ main ]              # main への push ですべて判定
    workflow_dispatch:

# ---------- 共通設定 ----------
env:
  AWS_REGION: ap-northeast-1
  # ----- Frontend -----
  DIST_DIR: frontend/dist           # Next.js なら frontend/out
  S3_BUCKET: thankq-frontend-site
  # ----- Backend -----
  ECR_REPOSITORY: thankq-app
  IMAGE_TAG: ${{ github.sha }}               # 「latest」固定運用
  CLOUDFRONT_ID: EZ1HWPKSWNR15

permissions:
  id-token: write                   # OIDC AssumeRole 用
  contents: read

jobs:
  # 0) どのフォルダが変更されたかを判定
  path-filter:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend:  ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  # 1) Frontend ビルド & S3 へデプロイ
  build-frontend:
    if: needs.path-filter.outputs.frontend == 'true'
    needs: path-filter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run-install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Build frontend
        working-directory: frontend
        run: |
          pnpm install --no-frozen-lockfile
          pnpm run build

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CI_FRONTEND_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - name: Upload to S3
        run: |
          echo "DIST_DIR=$DIST_DIR  S3_BUCKET=$S3_BUCKET"
          aws s3 sync "$DIST_DIR/" "s3://$S3_BUCKET" \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude ".DS_Store" --exclude "._*" --exclude ".*.swp"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_ID" \
            --paths "/index.html" "/assets/*"
  # 2) Backend ビルド & ECR プッシュ
  build-backend:
    if: needs.path-filter.outputs.backend == 'true'
    needs: path-filter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # -- AWS 認証 & ECR ログイン --
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      # -- Docker build / push --
      - name: Build & push image
        run: |
          ECR_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY \
                    --query 'repositories[0].repositoryUri' --output text)
          docker build -f backend/Dockerfile \
          -t $ECR_URI:${IMAGE_TAG} \
          -t $ECR_URI:latest \
          backend
          docker push --all-tags $ECR_URI
      - name: Update ECS service
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::769392325383:role/thankq-ci-ecr
          aws-region: ap-northeast-1

      - name: Register new task def and deploy
        id: deploy
        run: |
          # ECRリポジトリURIを取得
          ECR_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY \
                    --query 'repositories[0].repositoryUri' --output text)
          
          # (1) 既存タスク定義を JSON 取得
          aws ecs describe-task-definition \
            --task-definition thankq-app \
            --query taskDefinition > td.json

          # (2) image を latest に置換して新しい TD を登録
          IMAGE="${ECR_URI}:latest"
          jq --arg image "$IMAGE" \
             '.containerDefinitions[0].image = $image | del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)' \
             td.json > new.json

          REVISION=$(aws ecs register-task-definition --cli-input-json file://new.json \
                     --query 'taskDefinition.revision' --output text)

          # (3) サービスを New TD に更新
          aws ecs update-service \
              --cluster thankq \
              --service thankq-svc \
              --task-definition thankq-app:$REVISION \
              --force-new-deployment
